// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using GorkoRu;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace GorkoRu
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Welcome
    {
        [JsonProperty("restaurants")]
        public List<Restaurant> Restaurants { get; set; }

        [JsonProperty("meta")]
        public Meta Meta { get; set; }
    }

    public partial class Meta
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("total_count")]
        public long TotalCount { get; set; }

        [JsonProperty("count")]
        public long Count { get; set; }

        [JsonProperty("per_page")]
        public long PerPage { get; set; }

        [JsonProperty("page")]
        public long Page { get; set; }

        [JsonProperty("offset")]
        public long Offset { get; set; }

        [JsonProperty("pages_count")]
        public long PagesCount { get; set; }
    }

    public partial class Restaurant
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("user_id")]
        public long UserId { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("top")]
        public long Top { get; set; }

        [JsonProperty("top_description")]
        public string TopDescription { get; set; }

        [JsonProperty("type")]
        public TypeClass Type { get; set; }

        [JsonProperty("city")]
        public City City { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("latitude")]
        public double Latitude { get; set; }

        [JsonProperty("longitude")]
        public double Longitude { get; set; }

        [JsonProperty("reviews_counts")]
        public ReviewsCounts ReviewsCounts { get; set; }

        [JsonProperty("params")]
        public RestaurantParams Params { get; set; }

        [JsonProperty("metro")]
        public List<object> Metro { get; set; }

        [JsonProperty("capacity")]
        public List<long> Capacity { get; set; }

        [JsonProperty("rooms_count_text")]
        public RoomsCountText RoomsCountText { get; set; }

        [JsonProperty("panorama_url")]
        public Uri PanoramaUrl { get; set; }

        [JsonProperty("has_calendar")]
        public bool HasCalendar { get; set; }

        [JsonProperty("covers")]
        public List<Cover> Covers { get; set; }

        [JsonProperty("cover_url")]
        public Uri CoverUrl { get; set; }

        [JsonProperty("address")]
        public string Address { get; set; }

        [JsonProperty("coords")]
        public Coords Coords { get; set; }

        [JsonProperty("editData")]
        public bool EditData { get; set; }

        [JsonProperty("commission")]
        public long? Commission { get; set; }

        [JsonProperty("busy_schedule")]
        public List<BusySchedule> BusySchedule { get; set; }

        [JsonProperty("free_rooms_count")]
        public object FreeRoomsCount { get; set; }

        [JsonProperty("rooms")]
        public List<Room> Rooms { get; set; }
    }

    public partial class BusySchedule
    {
        [JsonProperty("month")]
        public long Month { get; set; }

        [JsonProperty("monthShortName")]
        public MonthShortName MonthShortName { get; set; }

        [JsonProperty("date")]
        public DateTimeOffset Date { get; set; }

        [JsonProperty("busyCount")]
        public long BusyCount { get; set; }

        [JsonProperty("percent")]
        public long Percent { get; set; }
    }

    public partial class City
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("region_id")]
        public long RegionId { get; set; }

        [JsonProperty("domain")]
        public Domain Domain { get; set; }

        [JsonProperty("is_show_region")]
        public bool IsShowRegion { get; set; }

        [JsonProperty("name")]
        public CityName Name { get; set; }

        [JsonProperty("is_agglomeration")]
        public long IsAgglomeration { get; set; }

        [JsonProperty("agglomeration_name")]
        public string AgglomerationName { get; set; }

        [JsonProperty("timezone")]
        public Timezone Timezone { get; set; }
    }

    public partial class Coords
    {
        [JsonProperty("latitude")]
        public double Latitude { get; set; }

        [JsonProperty("longitude")]
        public double Longitude { get; set; }
    }

    public partial class Cover
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("user_id")]
        public long UserId { get; set; }

        [JsonProperty("album_id")]
        public long AlbumId { get; set; }

        [JsonProperty("likes_count")]
        public long LikesCount { get; set; }

        [JsonProperty("my_like")]
        public bool MyLike { get; set; }

        [JsonProperty("comments_count")]
        public long CommentsCount { get; set; }

        [JsonProperty("type")]
        public CoverType Type { get; set; }

        [JsonProperty("original_url")]
        public Uri OriginalUrl { get; set; }

        [JsonProperty("preview_url")]
        public Uri PreviewUrl { get; set; }

        [JsonProperty("original_size")]
        public string OriginalSize { get; set; }

        [JsonProperty("video_aspect_ratio")]
        public long VideoAspectRatio { get; set; }

        [JsonProperty("position")]
        public long Position { get; set; }

        [JsonProperty("views")]
        public long Views { get; set; }

        [JsonProperty("sizes")]
        public Sizes Sizes { get; set; }

        [JsonProperty("preview_size")]
        public string PreviewSize { get; set; }

        [JsonProperty("video_duration")]
        public long VideoDuration { get; set; }

        [JsonProperty("video_service")]
        public object VideoService { get; set; }

        [JsonProperty("video_id")]
        public object VideoId { get; set; }

        [JsonProperty("video_link")]
        public object VideoLink { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("static_url")]
        public string StaticUrl { get; set; }

        [JsonProperty("can_send_to_feed")]
        public bool CanSendToFeed { get; set; }
    }

    public partial class Sizes
    {
        [JsonProperty("preview")]
        public Preview Preview { get; set; }

        [JsonProperty("original")]
        public string Original { get; set; }
    }

    public partial class Preview
    {
        [JsonProperty("b")]
        public B B { get; set; }
    }

    public partial class B
    {
        [JsonProperty("width")]
        public long Width { get; set; }

        [JsonProperty("height")]
        public long Height { get; set; }
    }

    public partial class RestaurantParams
    {
        [JsonProperty("param_kitchen")]
        public Param ParamKitchen { get; set; }

        [JsonProperty("param_cuisine")]
        public ParamCuisine ParamCuisine { get; set; }

        [JsonProperty("param_own_alcohol")]
        public Param ParamOwnAlcohol { get; set; }

        [JsonProperty("param_special")]
        public ParamSpecial ParamSpecial { get; set; }
    }

    public partial class ParamCuisine
    {
        [JsonProperty("name")]
        public ParamCuisineName Name { get; set; }

        [JsonProperty("attribute")]
        public ParamCuisineAttribute Attribute { get; set; }

        [JsonProperty("value_text")]
        public string ValueText { get; set; }

        [JsonProperty("type")]
        public ParamCuisineType Type { get; set; }

        [JsonProperty("value")]
        public string Value { get; set; }

        [JsonProperty("prefix")]
        public string Prefix { get; set; }

        [JsonProperty("suffix")]
        public string Suffix { get; set; }

        [JsonProperty("display")]
        public object Display { get; set; }
    }

    public partial class Param
    {
        [JsonProperty("name")]
        public ParamKitchenName Name { get; set; }

        [JsonProperty("attribute")]
        public ParamKitchenAttribute Attribute { get; set; }

        [JsonProperty("value_text")]
        public string ValueText { get; set; }

        [JsonProperty("type")]
        public ParamKitchenType Type { get; set; }

        [JsonProperty("in_card", NullValueHandling = NullValueHandling.Ignore)]
        public bool? InCard { get; set; }

        [JsonProperty("display")]
        public Display Display { get; set; }

        [JsonProperty("value")]
        public long? Value { get; set; }

        [JsonProperty("prefix")]
        public string Prefix { get; set; }

        [JsonProperty("suffix")]
        public Suffix Suffix { get; set; }

        [JsonProperty("corrector", NullValueHandling = NullValueHandling.Ignore)]
        public Corrector? Corrector { get; set; }
    }

    public partial class Display
    {
        [JsonProperty("type")]
        public DisplayType Type { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }
    }

    public partial class ParamSpecial
    {
        [JsonProperty("name")]
        public ParamSpecialName Name { get; set; }

        [JsonProperty("attribute")]
        public ParamSpecialAttribute Attribute { get; set; }

        [JsonProperty("value_text")]
        public string ValueText { get; set; }

        [JsonProperty("value")]
        public List<long> Value { get; set; }

        [JsonProperty("type")]
        public ParamSpecialType Type { get; set; }

        [JsonProperty("in_card")]
        public bool InCard { get; set; }

        [JsonProperty("display")]
        public Display Display { get; set; }

        [JsonProperty("prefix", NullValueHandling = NullValueHandling.Ignore)]
        public string Prefix { get; set; }

        [JsonProperty("suffix", NullValueHandling = NullValueHandling.Ignore)]
        public string Suffix { get; set; }
    }

    public partial class ReviewsCounts
    {
        [JsonProperty("bad")]
        public long Bad { get; set; }

        [JsonProperty("good")]
        public long Good { get; set; }

        [JsonProperty("neutral")]
        public long Neutral { get; set; }

        [JsonProperty("total")]
        public long? Total { get; set; }
    }

    public partial class Room
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("type_name")]
        public TypeNameEnum TypeName { get; set; }

        [JsonProperty("panorama_id")]
        public long? PanoramaId { get; set; }

        [JsonProperty("panorama_url")]
        public string PanoramaUrl { get; set; }

        [JsonProperty("scenes")]
        public Scenes? Scenes { get; set; }

        [JsonProperty("deleted")]
        public long Deleted { get; set; }

        [JsonProperty("cover_url")]
        public Uri CoverUrl { get; set; }

        [JsonProperty("position")]
        public long? Position { get; set; }

        [JsonProperty("params")]
        public RoomParams Params { get; set; }

        [JsonProperty("is_actual_schedule")]
        public bool IsActualSchedule { get; set; }

        [JsonProperty("schedule_update")]
        public string ScheduleUpdate { get; set; }

        [JsonProperty("schedule_update_date")]
        public DateTimeOffset? ScheduleUpdateDate { get; set; }

        [JsonProperty("schedule_update_title")]
        public ScheduleUpdateTitle ScheduleUpdateTitle { get; set; }

        [JsonProperty("prices")]
        public List<Price> Prices { get; set; }

        [JsonProperty("busy")]
        public object Busy { get; set; }

        [JsonProperty("busy_text")]
        public object BusyText { get; set; }
    }

    public partial class RoomParams
    {
        [JsonProperty("param_capacity")]
        public Param ParamCapacity { get; set; }
    }

    public partial class Price
    {
        [JsonProperty("key")]
        public PriceKey Key { get; set; }

        [JsonProperty("title")]
        public Title Title { get; set; }

        [JsonProperty("value")]
        public long Value { get; set; }

        [JsonProperty("value_text")]
        public string ValueText { get; set; }
    }

    public partial class TypeClass
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("key")]
        public TypeKey Key { get; set; }

        [JsonProperty("name")]
        public TypeName Name { get; set; }

        [JsonProperty("plural")]
        public Plural Plural { get; set; }

        [JsonProperty("url")]
        public Url Url { get; set; }
    }

    public enum MonthShortName { Апр, Дек, Март, Нояб, Февр, Янв };

    public enum Domain { Voronezh };

    public enum CityName { Воронеж };

    public enum Timezone { EuropeMoscow };

    public enum CoverType { Image };

    public enum ParamCuisineAttribute { ParamCuisine };

    public enum ParamCuisineName { ОписаниеКухни };

    public enum ParamCuisineType { Textarea };

    public enum ParamKitchenAttribute { ParamCapacity, ParamKitchen, ParamOwnAlcohol };

    public enum Corrector { Int };

    public enum DisplayType { Checked, Empty, Features, Nope };

    public enum ParamKitchenName { Вместимость, Кухня, МожноСвойАлкоголь };

    public enum Suffix { Empty, Чел };

    public enum ParamKitchenType { Input, Select };

    public enum ParamSpecialAttribute { ParamSpecial };

    public enum ParamSpecialName { Особенности };

    public enum ParamSpecialType { Checkbox };

    public enum PriceKey { ParamBanquetPrice };

    public enum Title { Стоимость };

    public enum Scenes { Empty, Scene0, Scene1, Scene2, Scene3 };

    public enum ScheduleUpdateTitle { ЗанятостьНеДостаточноПодробна, ЗанятостьНеЗаполнена, ЗанятостьОбновлена, ЗанятостьУстарела };

    public enum TypeNameEnum { ОткрытаяПлощадка, Помещение, Терраса };

    public enum RoomsCountText { The1Помещение, The1ПомещениеИ1ОткрытаяПлощадка, The2Помещения, The2ПомещенияИ1ОткрытаяПлощадка, The3Помещения, The4Помещения, The4ПомещенияИ1Терраса, The5Помещений };

    public enum TypeKey { Restaurant };

    public enum TypeName { БанкетныйЗал };

    public enum Plural { БанкетныеЗалы };

    public enum Url { Рестораны };

    public partial class Welcome
    {
        public static Welcome FromJson(string json) => JsonConvert.DeserializeObject<Welcome>(json, GorkoRu.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome self) => JsonConvert.SerializeObject(self, GorkoRu.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                MonthShortNameConverter.Singleton,
                DomainConverter.Singleton,
                CityNameConverter.Singleton,
                TimezoneConverter.Singleton,
                CoverTypeConverter.Singleton,
                ParamCuisineAttributeConverter.Singleton,
                ParamCuisineNameConverter.Singleton,
                ParamCuisineTypeConverter.Singleton,
                ParamKitchenAttributeConverter.Singleton,
                CorrectorConverter.Singleton,
                DisplayTypeConverter.Singleton,
                ParamKitchenNameConverter.Singleton,
                SuffixConverter.Singleton,
                ParamKitchenTypeConverter.Singleton,
                ParamSpecialAttributeConverter.Singleton,
                ParamSpecialNameConverter.Singleton,
                ParamSpecialTypeConverter.Singleton,
                PriceKeyConverter.Singleton,
                TitleConverter.Singleton,
                ScenesConverter.Singleton,
                ScheduleUpdateTitleConverter.Singleton,
                TypeNameEnumConverter.Singleton,
                RoomsCountTextConverter.Singleton,
                TypeKeyConverter.Singleton,
                TypeNameConverter.Singleton,
                PluralConverter.Singleton,
                UrlConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class MonthShortNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MonthShortName) || t == typeof(MonthShortName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Апр.":
                    return MonthShortName.Апр;
                case "Дек.":
                    return MonthShortName.Дек;
                case "Март":
                    return MonthShortName.Март;
                case "Нояб.":
                    return MonthShortName.Нояб;
                case "Февр.":
                    return MonthShortName.Февр;
                case "Янв.":
                    return MonthShortName.Янв;
            }
            throw new Exception("Cannot unmarshal type MonthShortName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (MonthShortName)untypedValue;
            switch (value)
            {
                case MonthShortName.Апр:
                    serializer.Serialize(writer, "Апр.");
                    return;
                case MonthShortName.Дек:
                    serializer.Serialize(writer, "Дек.");
                    return;
                case MonthShortName.Март:
                    serializer.Serialize(writer, "Март");
                    return;
                case MonthShortName.Нояб:
                    serializer.Serialize(writer, "Нояб.");
                    return;
                case MonthShortName.Февр:
                    serializer.Serialize(writer, "Февр.");
                    return;
                case MonthShortName.Янв:
                    serializer.Serialize(writer, "Янв.");
                    return;
            }
            throw new Exception("Cannot marshal type MonthShortName");
        }

        public static readonly MonthShortNameConverter Singleton = new MonthShortNameConverter();
    }

    internal class DomainConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Domain) || t == typeof(Domain?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "voronezh")
            {
                return Domain.Voronezh;
            }
            throw new Exception("Cannot unmarshal type Domain");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Domain)untypedValue;
            if (value == Domain.Voronezh)
            {
                serializer.Serialize(writer, "voronezh");
                return;
            }
            throw new Exception("Cannot marshal type Domain");
        }

        public static readonly DomainConverter Singleton = new DomainConverter();
    }

    internal class CityNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CityName) || t == typeof(CityName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Воронеж")
            {
                return CityName.Воронеж;
            }
            throw new Exception("Cannot unmarshal type CityName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CityName)untypedValue;
            if (value == CityName.Воронеж)
            {
                serializer.Serialize(writer, "Воронеж");
                return;
            }
            throw new Exception("Cannot marshal type CityName");
        }

        public static readonly CityNameConverter Singleton = new CityNameConverter();
    }

    internal class TimezoneConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Timezone) || t == typeof(Timezone?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Europe/Moscow")
            {
                return Timezone.EuropeMoscow;
            }
            throw new Exception("Cannot unmarshal type Timezone");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Timezone)untypedValue;
            if (value == Timezone.EuropeMoscow)
            {
                serializer.Serialize(writer, "Europe/Moscow");
                return;
            }
            throw new Exception("Cannot marshal type Timezone");
        }

        public static readonly TimezoneConverter Singleton = new TimezoneConverter();
    }

    internal class CoverTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CoverType) || t == typeof(CoverType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "image")
            {
                return CoverType.Image;
            }
            throw new Exception("Cannot unmarshal type CoverType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CoverType)untypedValue;
            if (value == CoverType.Image)
            {
                serializer.Serialize(writer, "image");
                return;
            }
            throw new Exception("Cannot marshal type CoverType");
        }

        public static readonly CoverTypeConverter Singleton = new CoverTypeConverter();
    }

    internal class ParamCuisineAttributeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ParamCuisineAttribute) || t == typeof(ParamCuisineAttribute?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "param_cuisine")
            {
                return ParamCuisineAttribute.ParamCuisine;
            }
            throw new Exception("Cannot unmarshal type ParamCuisineAttribute");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ParamCuisineAttribute)untypedValue;
            if (value == ParamCuisineAttribute.ParamCuisine)
            {
                serializer.Serialize(writer, "param_cuisine");
                return;
            }
            throw new Exception("Cannot marshal type ParamCuisineAttribute");
        }

        public static readonly ParamCuisineAttributeConverter Singleton = new ParamCuisineAttributeConverter();
    }

    internal class ParamCuisineNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ParamCuisineName) || t == typeof(ParamCuisineName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Описание кухни")
            {
                return ParamCuisineName.ОписаниеКухни;
            }
            throw new Exception("Cannot unmarshal type ParamCuisineName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ParamCuisineName)untypedValue;
            if (value == ParamCuisineName.ОписаниеКухни)
            {
                serializer.Serialize(writer, "Описание кухни");
                return;
            }
            throw new Exception("Cannot marshal type ParamCuisineName");
        }

        public static readonly ParamCuisineNameConverter Singleton = new ParamCuisineNameConverter();
    }

    internal class ParamCuisineTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ParamCuisineType) || t == typeof(ParamCuisineType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "textarea")
            {
                return ParamCuisineType.Textarea;
            }
            throw new Exception("Cannot unmarshal type ParamCuisineType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ParamCuisineType)untypedValue;
            if (value == ParamCuisineType.Textarea)
            {
                serializer.Serialize(writer, "textarea");
                return;
            }
            throw new Exception("Cannot marshal type ParamCuisineType");
        }

        public static readonly ParamCuisineTypeConverter Singleton = new ParamCuisineTypeConverter();
    }

    internal class ParamKitchenAttributeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ParamKitchenAttribute) || t == typeof(ParamKitchenAttribute?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "param_capacity":
                    return ParamKitchenAttribute.ParamCapacity;
                case "param_kitchen":
                    return ParamKitchenAttribute.ParamKitchen;
                case "param_own_alcohol":
                    return ParamKitchenAttribute.ParamOwnAlcohol;
            }
            throw new Exception("Cannot unmarshal type ParamKitchenAttribute");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ParamKitchenAttribute)untypedValue;
            switch (value)
            {
                case ParamKitchenAttribute.ParamCapacity:
                    serializer.Serialize(writer, "param_capacity");
                    return;
                case ParamKitchenAttribute.ParamKitchen:
                    serializer.Serialize(writer, "param_kitchen");
                    return;
                case ParamKitchenAttribute.ParamOwnAlcohol:
                    serializer.Serialize(writer, "param_own_alcohol");
                    return;
            }
            throw new Exception("Cannot marshal type ParamKitchenAttribute");
        }

        public static readonly ParamKitchenAttributeConverter Singleton = new ParamKitchenAttributeConverter();
    }

    internal class CorrectorConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Corrector) || t == typeof(Corrector?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "int")
            {
                return Corrector.Int;
            }
            throw new Exception("Cannot unmarshal type Corrector");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Corrector)untypedValue;
            if (value == Corrector.Int)
            {
                serializer.Serialize(writer, "int");
                return;
            }
            throw new Exception("Cannot marshal type Corrector");
        }

        public static readonly CorrectorConverter Singleton = new CorrectorConverter();
    }

    internal class DisplayTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DisplayType) || t == typeof(DisplayType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return DisplayType.Empty;
                case "checked":
                    return DisplayType.Checked;
                case "features":
                    return DisplayType.Features;
                case "nope":
                    return DisplayType.Nope;
            }
            throw new Exception("Cannot unmarshal type DisplayType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DisplayType)untypedValue;
            switch (value)
            {
                case DisplayType.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case DisplayType.Checked:
                    serializer.Serialize(writer, "checked");
                    return;
                case DisplayType.Features:
                    serializer.Serialize(writer, "features");
                    return;
                case DisplayType.Nope:
                    serializer.Serialize(writer, "nope");
                    return;
            }
            throw new Exception("Cannot marshal type DisplayType");
        }

        public static readonly DisplayTypeConverter Singleton = new DisplayTypeConverter();
    }

    internal class ParamKitchenNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ParamKitchenName) || t == typeof(ParamKitchenName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Вместимость":
                    return ParamKitchenName.Вместимость;
                case "Кухня":
                    return ParamKitchenName.Кухня;
                case "Можно свой алкоголь":
                    return ParamKitchenName.МожноСвойАлкоголь;
            }
            throw new Exception("Cannot unmarshal type ParamKitchenName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ParamKitchenName)untypedValue;
            switch (value)
            {
                case ParamKitchenName.Вместимость:
                    serializer.Serialize(writer, "Вместимость");
                    return;
                case ParamKitchenName.Кухня:
                    serializer.Serialize(writer, "Кухня");
                    return;
                case ParamKitchenName.МожноСвойАлкоголь:
                    serializer.Serialize(writer, "Можно свой алкоголь");
                    return;
            }
            throw new Exception("Cannot marshal type ParamKitchenName");
        }

        public static readonly ParamKitchenNameConverter Singleton = new ParamKitchenNameConverter();
    }

    internal class SuffixConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Suffix) || t == typeof(Suffix?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return Suffix.Empty;
                case "чел.":
                    return Suffix.Чел;
            }
            throw new Exception("Cannot unmarshal type Suffix");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Suffix)untypedValue;
            switch (value)
            {
                case Suffix.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case Suffix.Чел:
                    serializer.Serialize(writer, "чел.");
                    return;
            }
            throw new Exception("Cannot marshal type Suffix");
        }

        public static readonly SuffixConverter Singleton = new SuffixConverter();
    }

    internal class ParamKitchenTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ParamKitchenType) || t == typeof(ParamKitchenType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "input":
                    return ParamKitchenType.Input;
                case "select":
                    return ParamKitchenType.Select;
            }
            throw new Exception("Cannot unmarshal type ParamKitchenType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ParamKitchenType)untypedValue;
            switch (value)
            {
                case ParamKitchenType.Input:
                    serializer.Serialize(writer, "input");
                    return;
                case ParamKitchenType.Select:
                    serializer.Serialize(writer, "select");
                    return;
            }
            throw new Exception("Cannot marshal type ParamKitchenType");
        }

        public static readonly ParamKitchenTypeConverter Singleton = new ParamKitchenTypeConverter();
    }

    internal class ParamSpecialAttributeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ParamSpecialAttribute) || t == typeof(ParamSpecialAttribute?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "param_special")
            {
                return ParamSpecialAttribute.ParamSpecial;
            }
            throw new Exception("Cannot unmarshal type ParamSpecialAttribute");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ParamSpecialAttribute)untypedValue;
            if (value == ParamSpecialAttribute.ParamSpecial)
            {
                serializer.Serialize(writer, "param_special");
                return;
            }
            throw new Exception("Cannot marshal type ParamSpecialAttribute");
        }

        public static readonly ParamSpecialAttributeConverter Singleton = new ParamSpecialAttributeConverter();
    }

    internal class ParamSpecialNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ParamSpecialName) || t == typeof(ParamSpecialName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Особенности")
            {
                return ParamSpecialName.Особенности;
            }
            throw new Exception("Cannot unmarshal type ParamSpecialName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ParamSpecialName)untypedValue;
            if (value == ParamSpecialName.Особенности)
            {
                serializer.Serialize(writer, "Особенности");
                return;
            }
            throw new Exception("Cannot marshal type ParamSpecialName");
        }

        public static readonly ParamSpecialNameConverter Singleton = new ParamSpecialNameConverter();
    }

    internal class ParamSpecialTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ParamSpecialType) || t == typeof(ParamSpecialType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "checkbox")
            {
                return ParamSpecialType.Checkbox;
            }
            throw new Exception("Cannot unmarshal type ParamSpecialType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ParamSpecialType)untypedValue;
            if (value == ParamSpecialType.Checkbox)
            {
                serializer.Serialize(writer, "checkbox");
                return;
            }
            throw new Exception("Cannot marshal type ParamSpecialType");
        }

        public static readonly ParamSpecialTypeConverter Singleton = new ParamSpecialTypeConverter();
    }

    internal class PriceKeyConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PriceKey) || t == typeof(PriceKey?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "param_banquet_price")
            {
                return PriceKey.ParamBanquetPrice;
            }
            throw new Exception("Cannot unmarshal type PriceKey");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PriceKey)untypedValue;
            if (value == PriceKey.ParamBanquetPrice)
            {
                serializer.Serialize(writer, "param_banquet_price");
                return;
            }
            throw new Exception("Cannot marshal type PriceKey");
        }

        public static readonly PriceKeyConverter Singleton = new PriceKeyConverter();
    }

    internal class TitleConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Title) || t == typeof(Title?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Стоимость")
            {
                return Title.Стоимость;
            }
            throw new Exception("Cannot unmarshal type Title");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Title)untypedValue;
            if (value == Title.Стоимость)
            {
                serializer.Serialize(writer, "Стоимость");
                return;
            }
            throw new Exception("Cannot marshal type Title");
        }

        public static readonly TitleConverter Singleton = new TitleConverter();
    }

    internal class ScenesConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Scenes) || t == typeof(Scenes?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "[\"scene0\"]":
                    return Scenes.Scene0;
                case "[\"scene1\"]":
                    return Scenes.Scene1;
                case "[\"scene2\"]":
                    return Scenes.Scene2;
                case "[\"scene3\"]":
                    return Scenes.Scene3;
                case "[]":
                    return Scenes.Empty;
            }
            throw new Exception("Cannot unmarshal type Scenes");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Scenes)untypedValue;
            switch (value)
            {
                case Scenes.Scene0:
                    serializer.Serialize(writer, "[\"scene0\"]");
                    return;
                case Scenes.Scene1:
                    serializer.Serialize(writer, "[\"scene1\"]");
                    return;
                case Scenes.Scene2:
                    serializer.Serialize(writer, "[\"scene2\"]");
                    return;
                case Scenes.Scene3:
                    serializer.Serialize(writer, "[\"scene3\"]");
                    return;
                case Scenes.Empty:
                    serializer.Serialize(writer, "[]");
                    return;
            }
            throw new Exception("Cannot marshal type Scenes");
        }

        public static readonly ScenesConverter Singleton = new ScenesConverter();
    }

    internal class ScheduleUpdateTitleConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ScheduleUpdateTitle) || t == typeof(ScheduleUpdateTitle?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Занятость не достаточно подробна":
                    return ScheduleUpdateTitle.ЗанятостьНеДостаточноПодробна;
                case "Занятость не заполнена":
                    return ScheduleUpdateTitle.ЗанятостьНеЗаполнена;
                case "Занятость обновлена":
                    return ScheduleUpdateTitle.ЗанятостьОбновлена;
                case "Занятость устарела":
                    return ScheduleUpdateTitle.ЗанятостьУстарела;
            }
            throw new Exception("Cannot unmarshal type ScheduleUpdateTitle");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ScheduleUpdateTitle)untypedValue;
            switch (value)
            {
                case ScheduleUpdateTitle.ЗанятостьНеДостаточноПодробна:
                    serializer.Serialize(writer, "Занятость не достаточно подробна");
                    return;
                case ScheduleUpdateTitle.ЗанятостьНеЗаполнена:
                    serializer.Serialize(writer, "Занятость не заполнена");
                    return;
                case ScheduleUpdateTitle.ЗанятостьОбновлена:
                    serializer.Serialize(writer, "Занятость обновлена");
                    return;
                case ScheduleUpdateTitle.ЗанятостьУстарела:
                    serializer.Serialize(writer, "Занятость устарела");
                    return;
            }
            throw new Exception("Cannot marshal type ScheduleUpdateTitle");
        }

        public static readonly ScheduleUpdateTitleConverter Singleton = new ScheduleUpdateTitleConverter();
    }

    internal class TypeNameEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeNameEnum) || t == typeof(TypeNameEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Открытая площадка":
                    return TypeNameEnum.ОткрытаяПлощадка;
                case "Помещение":
                    return TypeNameEnum.Помещение;
                case "Терраса":
                    return TypeNameEnum.Терраса;
            }
            throw new Exception("Cannot unmarshal type TypeNameEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeNameEnum)untypedValue;
            switch (value)
            {
                case TypeNameEnum.ОткрытаяПлощадка:
                    serializer.Serialize(writer, "Открытая площадка");
                    return;
                case TypeNameEnum.Помещение:
                    serializer.Serialize(writer, "Помещение");
                    return;
                case TypeNameEnum.Терраса:
                    serializer.Serialize(writer, "Терраса");
                    return;
            }
            throw new Exception("Cannot marshal type TypeNameEnum");
        }

        public static readonly TypeNameEnumConverter Singleton = new TypeNameEnumConverter();
    }

    internal class RoomsCountTextConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(RoomsCountText) || t == typeof(RoomsCountText?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "1 помещение":
                    return RoomsCountText.The1Помещение;
                case "1 помещение и 1 открытая площадка":
                    return RoomsCountText.The1ПомещениеИ1ОткрытаяПлощадка;
                case "2 помещения":
                    return RoomsCountText.The2Помещения;
                case "2 помещения и 1 открытая площадка":
                    return RoomsCountText.The2ПомещенияИ1ОткрытаяПлощадка;
                case "3 помещения":
                    return RoomsCountText.The3Помещения;
                case "4 помещения":
                    return RoomsCountText.The4Помещения;
                case "4 помещения и 1 терраса":
                    return RoomsCountText.The4ПомещенияИ1Терраса;
                case "5 помещений":
                    return RoomsCountText.The5Помещений;
            }
            throw new Exception("Cannot unmarshal type RoomsCountText");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (RoomsCountText)untypedValue;
            switch (value)
            {
                case RoomsCountText.The1Помещение:
                    serializer.Serialize(writer, "1 помещение");
                    return;
                case RoomsCountText.The1ПомещениеИ1ОткрытаяПлощадка:
                    serializer.Serialize(writer, "1 помещение и 1 открытая площадка");
                    return;
                case RoomsCountText.The2Помещения:
                    serializer.Serialize(writer, "2 помещения");
                    return;
                case RoomsCountText.The2ПомещенияИ1ОткрытаяПлощадка:
                    serializer.Serialize(writer, "2 помещения и 1 открытая площадка");
                    return;
                case RoomsCountText.The3Помещения:
                    serializer.Serialize(writer, "3 помещения");
                    return;
                case RoomsCountText.The4Помещения:
                    serializer.Serialize(writer, "4 помещения");
                    return;
                case RoomsCountText.The4ПомещенияИ1Терраса:
                    serializer.Serialize(writer, "4 помещения и 1 терраса");
                    return;
                case RoomsCountText.The5Помещений:
                    serializer.Serialize(writer, "5 помещений");
                    return;
            }
            throw new Exception("Cannot marshal type RoomsCountText");
        }

        public static readonly RoomsCountTextConverter Singleton = new RoomsCountTextConverter();
    }

    internal class TypeKeyConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeKey) || t == typeof(TypeKey?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "restaurant")
            {
                return TypeKey.Restaurant;
            }
            throw new Exception("Cannot unmarshal type TypeKey");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeKey)untypedValue;
            if (value == TypeKey.Restaurant)
            {
                serializer.Serialize(writer, "restaurant");
                return;
            }
            throw new Exception("Cannot marshal type TypeKey");
        }

        public static readonly TypeKeyConverter Singleton = new TypeKeyConverter();
    }

    internal class TypeNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeName) || t == typeof(TypeName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Банкетный зал")
            {
                return TypeName.БанкетныйЗал;
            }
            throw new Exception("Cannot unmarshal type TypeName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeName)untypedValue;
            if (value == TypeName.БанкетныйЗал)
            {
                serializer.Serialize(writer, "Банкетный зал");
                return;
            }
            throw new Exception("Cannot marshal type TypeName");
        }

        public static readonly TypeNameConverter Singleton = new TypeNameConverter();
    }

    internal class PluralConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Plural) || t == typeof(Plural?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Банкетные залы")
            {
                return Plural.БанкетныеЗалы;
            }
            throw new Exception("Cannot unmarshal type Plural");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Plural)untypedValue;
            if (value == Plural.БанкетныеЗалы)
            {
                serializer.Serialize(writer, "Банкетные залы");
                return;
            }
            throw new Exception("Cannot marshal type Plural");
        }

        public static readonly PluralConverter Singleton = new PluralConverter();
    }

    internal class UrlConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Url) || t == typeof(Url?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "рестораны")
            {
                return Url.Рестораны;
            }
            throw new Exception("Cannot unmarshal type Url");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Url)untypedValue;
            if (value == Url.Рестораны)
            {
                serializer.Serialize(writer, "рестораны");
                return;
            }
            throw new Exception("Cannot marshal type Url");
        }

        public static readonly UrlConverter Singleton = new UrlConverter();
    }
}
